<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>每日洛谷_9.28</title>
    <link href="/2020/09/28/%E6%AF%8F%E6%97%A5%E6%B4%9B%E8%B0%B7-9-28/"/>
    <url>/2020/09/28/%E6%AF%8F%E6%97%A5%E6%B4%9B%E8%B0%B7-9-28/</url>
    
    <content type="html"><![CDATA[<p>今天刷洛谷基础题看到一个很好的题，分享一下。</p><a id="more"></a><p>​    <a href="https://www.luogu.com.cn/problem/P2181">原题链接</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>对于一个 n 个顶点的凸多边形，它的任何三条对角线都不会交于一点。请求出图形中对角线交点的个数。</p><p>例如，6 边形：</p><img src="/2020/09/28/%E6%AF%8F%E6%97%A5%E6%B4%9B%E8%B0%B7-9-28/6023.png" style="zoom: 80%;"><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入只有一行一个整数 nnn，代表边数。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个整数代表答案。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><p>输入 #1 &nbsp;&emsp;输入#2</p><blockquote><p>3 &nbsp; &emsp;&nbsp;      6</p></blockquote><p>输出#2 &nbsp; &emsp; 输入#2</p><blockquote><p>0 &nbsp; &emsp;      &nbsp;15</p></blockquote><h2 id="说明与提示"><a href="#说明与提示" class="headerlink" title="说明与提示"></a>说明与提示</h2><ul><li>对于 50%50 %50% 的数据，保证 3≤n≤100。</li><li>对于 100%100 %100% 的数据，保证 3≤n≤10^5。</li></ul><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>首先看题目中一句<strong>任何三条对角线都不会交于一点</strong>，所以给定<strong>一个交点，可以确定两条对角线——也就意味着确定了四个角</strong></p><p>所以这道题就变成了一个排列问题</p><p>即求Cn4的组合数问题 ：就是求 n * (n-1) * (n-2) * (n-3) /24</p><p>这时大家可能会想&nbsp;”啊，这个题目这么简单，怎么会有人拿他出来写博客！”</p><p>所以你就写出了下面的代码</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">int</span> n;<span class="hljs-keyword">int</span> outcome;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">cin</span>&gt;&gt;n;    outcome=n*(n<span class="hljs-number">-1</span>)*(n<span class="hljs-number">-2</span>)*(n<span class="hljs-number">-3</span>)/<span class="hljs-number">24</span>;    <span class="hljs-built_in">cout</span>&lt;&lt;outcome&lt;&lt;<span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>结果</p><p><img src="/2020/09/28/%E6%AF%8F%E6%97%A5%E6%B4%9B%E8%B0%B7-9-28/%E7%BB%93%E6%9E%9C.png" alt="结果"></p><p><strong>再仔细阅读下题目，你会发现这道题会爆数据的…</strong></p><p><strong>所以你把int 全部换成了long long 或者unsigned long long ，并沾沾自喜，这么简单不会真有人拿出来写博客吧！</strong></p><p>结果你又发现出现了两个WA…（手动狗头）</p><p>这时你想到，我可以写高精求组合数啊</p><p><em>这无疑是一种很好的解题方法，但对于这样一道入门题来说，未免太…</em></p><p><strong>所以给出了一个很妙的写法</strong></p><p>那就是把 n * (n-1) * (n-2) * (n-3) /24写成 n * (n-1)/2 *(n-2) /3 *(n-3)/4</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> n;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> outcome;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">cin</span>&gt;&gt;n;    outcome=n*(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>*(n<span class="hljs-number">-2</span>)/<span class="hljs-number">3</span>*(n<span class="hljs-number">-3</span>)/<span class="hljs-number">4</span>;    <span class="hljs-built_in">cout</span>&lt;&lt;outcome&lt;&lt;<span class="hljs-built_in">endl</span>;&#125;</code></pre><p>现在来分析一下为什么这样写是对的。</p><p>首先n * (n-1)中一定有一个是2的倍数，所以可以被2整除</p><p>n * (n-1) *(n-2)中一定有一个是3的倍数，所以可以被3整除</p><p>n * (n-1) * (n-2) * (n-3) 中一定有一个是4的倍数，所以可以被4整除</p><p>emmmmmmmmmmm，就差不多是这样了</p><p>溜了溜了，上课去。</p>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NEMU实验</title>
    <link href="/2020/09/27/NEMU%E5%AE%9E%E9%AA%8C/"/>
    <url>/2020/09/27/NEMU%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<p>一步步记录自己的实验过程。</p><a id="more"></a>]]></content>
    
    
    <categories>
      
      <category>Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NEMU_Lab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>欧几里得算法</title>
    <link href="/2020/09/22/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/"/>
    <url>/2020/09/22/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>昨天上算法课听到了这个算法，突发兴趣来写一篇blog。</p><a id="more"></a><h1 id="欧几里得算法的用处"><a href="#欧几里得算法的用处" class="headerlink" title="欧几里得算法的用处"></a>欧几里得算法的用处</h1><p>欧几里得算法也称为辗转相除法，是求解最大公约数的一种方法。</p><p>若有两个数a和b，求a和b的最大公约数，按照我们之前所学的东西，可能只会枚举a与b的因子，效率很低…</p><p>但欧几里得为我们提供了一个十分便捷的方法。</p><h1 id="一个强大的定理"><a href="#一个强大的定理" class="headerlink" title="一个强大的定理"></a>一个强大的定理</h1><p><strong>gcd(a,b) = gcd(b, a%b)</strong></p><p>下面给出证明</p><pre><code class="hljs cpp">设a与b的公约数为 k ，a=bx+y;则 k|a 且 k|b ，有 a%b=y又有y=a-bx, 所以 k|y。即 k|a%b再假设b 与 a%b的公约数为kk，得 kk|a，所以(a,b)与(b,a%b)的公约数相同，所以其最大公约数也相同。即gcd(a,b)==gcd(b,a%b);</code></pre><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>任何数与0的最大公约数都是他本身，且根据gcd(a,b)==gcd(b,a%b)可得知</p><p>当gcd中余数为0时，另一个数就是最大公约数。</p><p>所以代码如下</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> outcome;    <span class="hljs-keyword">int</span> temp;    <span class="hljs-keyword">while</span>(b!=<span class="hljs-number">0</span>)    &#123;        temp=a%b;        a=b;        b=temp;    &#125;    outcome=a;    <span class="hljs-keyword">return</span> outcome;&#125;</code></pre><p><em>溜溜球，去学概率论了…</em></p>]]></content>
    
    
    <categories>
      
      <category>Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>世界反法西斯战争胜利75周年有感</title>
    <link href="/2020/09/03/%E4%B8%96%E7%95%8C%E5%8F%8D%E6%B3%95%E8%A5%BF%E6%96%AF%E6%88%98%E4%BA%89%E8%83%9C%E5%88%A975%E5%91%A8%E5%B9%B4%E6%9C%89%E6%84%9F/"/>
    <url>/2020/09/03/%E4%B8%96%E7%95%8C%E5%8F%8D%E6%B3%95%E8%A5%BF%E6%96%AF%E6%88%98%E4%BA%89%E8%83%9C%E5%88%A975%E5%91%A8%E5%B9%B4%E6%9C%89%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<p>​       这是我今年第三次流泪：第一次是在听《国际歌》的时候，第二次是在读《悲惨世界》的时候，今天是第三次。但这次除了流泪，我还有一些忧虑。</p><a id="more"></a><p>​        “为有牺牲多壮志，敢叫日月换新天”。法西斯的阴云在中华大地盘旋了十四年，三千五百万烈士在反法西斯战争中牺牲。他们在极度艰苦的环境中仍坚守心中理想，献身于保卫祖国的斗争，以自己的血肉之躯换来了中华民族的转折点，换来了现在的人民共和国，换来了民族运动的高潮。他们的事迹永世长存，他们的功绩永垂不朽。</p><p>​        中国人民的斗争无疑对世界法西斯主义进行了沉重的打击，但法西斯主义已经完全消散了吗？红色的太阳已经高悬了吗？</p><p>​        只怕这片阴云恐怕还在盘旋，太阳也才刚放出光芒。</p><p>​        世界经济形势低迷，势必会带来社会变革。而对于现在的出路只有两条：左转，马列主义；右转，法西斯主义。而资本主义的领头人——美国，目前地表最强的国家，正在带领着一众资本主义国家向右疾行。而随着苏联的解体，国际共运陷入了又一次低潮，资本主义国家人民的声音越来越小。</p><p>​        再加上最近美国对华动作不断：贸易战、对台动作、驱逐中国留学生……，这一系列动作不禁让我想起了纳粹德国，担心会出现一个新的“水晶之夜”。担心出现像拉斯科利尼科夫那样的人——一个自认为非凡的普通人。我们已经为旧的法西斯主义付出了三千五百万条生命的代价，我们不能再忍受这样沉痛的代价。</p><p>​        昔日的盟友已经在法西斯道路上渐行渐远，屠龙者已经成为了恶龙。我们更不应松开我们的反法西斯历史，成为世界下一座灯塔。</p><p>​        现在世界上除了我们，再也没有人能担起反法西斯战士的称号了！达瓦里氏，我们的前途是光明的，社会主义的又一次高潮即将出现在东方；我们的前途也是崎岖的，我们面对的是前所未有的强大的敌人——美国，一个远比纳粹德国强大的力量。</p><p>​        在黎明到来前，会有很多人倒下，但我们终将迎来光明。</p><p>​        达瓦里氏，你，愿意和我一起吗？</p>]]></content>
    
    
    <categories>
      
      <category>Socialism</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thinking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++面向过程总结</title>
    <link href="/2020/08/12/C-%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <url>/2020/08/12/C-%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>注：本文是我回顾C++面向对象内容前的一些自认为有趣的内容orz </p><p>本博文参考书籍：《C++ primer plus》（第六版）</p><a id="more"></a><h1 id="再从-Hello-World-谈起"><a href="#再从-Hello-World-谈起" class="headerlink" title="再从 Hello World 谈起"></a>再从 Hello World 谈起</h1><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Hello World!&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>经过了一年的学习，这个简单的程序感觉不值一提</p><p><strong>但仔细看看，对于：include, iostream, using namespace std这些名词我真的十分了解吗？</strong></p><p> <em>虽然现在也不能说全部了解，我只是把自己掌握的东西分享出来…orz</em></p><h2 id="我们的程序真的只有这么几行吗？"><a href="#我们的程序真的只有这么几行吗？" class="headerlink" title="我们的程序真的只有这么几行吗？"></a>我们的程序真的只有这么几行吗？</h2><p>谈到这个问题就必须引出一个<strong>预处理器</strong>的概念</p><p>对计算机系统有初步了解后，我们可以知道源代码需要经过：预处理器 –&gt; 编译器 –&gt;汇编器 –&gt;链接器后才能生成可执行的二进制文件。</p><p>预处理器有很多种（都是以#开头），include是我们最早见到的一个。</p><p>其作用是：<strong>把我们的源文件和预处理的头文件进行整合，然后对合并后的文件进行编译</strong></p><p><strong>以iostream为例子，其进行整合的目的就是为了让程序能够和外界进行通信，io是input和output的缩写</strong></p><p><em>小知识：endl也是包含在iostream中的哦…</em></p><h2 id="using-namespace-std-是嘛意思？"><a href="#using-namespace-std-是嘛意思？" class="headerlink" title="using namespace std 是嘛意思？"></a>using namespace std 是嘛意思？</h2><p>如果对C语言有过了解，那么你会对这个东东感到很新奇，因为C里面并没有…</p><p><strong>这是C++为了方便合作开发(避免变量和函数名重复导致程序错误的情况)在C基础上提出的概念</strong></p><pre><code class="hljs c++"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span></code></pre><p>namespace 就是它翻译过来的意思 “命名空间”</p><p>这行代码叫做<strong>using编译指令</strong> //<strong>全局代码的类、函数、变量</strong>命名空间都是std(standard)即c++定义的标准命名空间</p><p>既然这是后来加上的，那么我们自然可以去掉它。</p><p>还是对Hello World来说</p><p>一种是非标准写法</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Hello World&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p><em>此写法很可能不被你的编译器支持（需要另安插件），运行成功也会出现warning，因为该库是C++旧风格，现在已经不再标准库里</em></p><p>另一种是比较繁琐的写法</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Hello World&quot;</span>&lt;&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">//更好的策略是使用 using std::cin或者cout或endl——只使需要的名称可用</span></code></pre><p><em>小知识：带 .h的头文件都是C语言原有的；头文件前带 c的(cmath)是C原有头文件转换为C++文件的</em></p><h1 id="变量与数据"><a href="#变量与数据" class="headerlink" title="变量与数据"></a>变量与数据</h1><p>C++是一门面向对象的编程语言，即使我们现在在对面向过程的部分进行讨论，但它的设计还是为了面向对象服务——只有理解了C++中内置的类型才能自己创造类。</p><p><em>首先让我们复习一下变量的命名规则</em></p><blockquote><p>1.名称中只能使用字母、数字、下划线</p><p>2.名称的第一个字不能说数字</p><p>3.大小写敏感</p><p>4.不能将C++关键字作为变量名</p><p>5.以两个下划线或下划线和大写字母开头的名称将被保留给实现(编译器和其使用的资源)使用，以一个下划线开头的名字被保留给实现，用作全局标识符。</p><p>//你可以打开库函数看一下，里面的函数名大多由下划线开始<a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/c_global/cmath">C++STL源代码</a></p><p>6.C++对于变量名长短没有限制，但有些平台会有长度限制。</p></blockquote><h2 id="变量的初始化方式"><a href="#变量的初始化方式" class="headerlink" title="变量的初始化方式"></a>变量的初始化方式</h2><p>C++提供了多种初始化方式。</p><pre><code class="hljs csharp"><span class="hljs-number">1.</span><span class="hljs-keyword">int</span> x = <span class="hljs-keyword">value</span>;<span class="hljs-number">2.</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">x</span>(<span class="hljs-params"><span class="hljs-keyword">value</span></span>)</span>;<span class="hljs-number">3.</span><span class="hljs-keyword">int</span> x&#123;<span class="hljs-keyword">value</span>&#125;;<span class="hljs-number">4.</span><span class="hljs-keyword">int</span> x =&#123;<span class="hljs-keyword">value</span>&#125;; <span class="hljs-comment">//大括号的方式也可以用来初始化数组。</span></code></pre><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>常见的有short, int ,long, long long ,char 以及他们的无符号形式。</p><p>我们这里关注的是如何对整型类型进行选择。</p><p>short类型大多用于使用大型整形数组时使用。</p><p>如果变量整数值大于16bits所表示的最大值，推荐使用long，这样即使移植到不同系统也能正常工作。</p><h3 id="各个进制的表示"><a href="#各个进制的表示" class="headerlink" title="各个进制的表示"></a>各个进制的表示</h3><p>常用的进制有 十进制、八进制、十六进制。</p><p>十进制：第一位为1~9。</p><p>八进制：第一位为0，第二位为1~7；</p><p>十六进制：前两位为0x / 0X</p><p>cout中输出各个进制的数字，需要使用控制符: {dec , hex ,oct}  //在命名空间std中。</p><pre><code class="hljs cpp"><span class="hljs-built_in">cout</span>&lt;&lt; dec &lt;&lt; value;<span class="hljs-built_in">cout</span>&lt;&lt; hex &lt;&lt; value;<span class="hljs-built_in">cout</span>&lt;&lt; oct &lt;&lt; value; </code></pre><h2 id="C-程序如何确定常量类型"><a href="#C-程序如何确定常量类型" class="headerlink" title="C++程序如何确定常量类型"></a>C++程序如何确定常量类型</h2><p>当你在程序中使用一个数字时</p><pre><code class="hljs cpp"><span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-number">2020</span>&lt;&lt;<span class="hljs-built_in">endl</span>;</code></pre><p>你知道程序将其存储为什么类型吗？</p><p>除非数字后面有后缀(u,ul,l,ll,ull…)或者数字大小超过int类型，否则程序将其默认存为int型。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Language</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My Bucket List -- version 1</title>
    <link href="/2020/08/11/My-Bucket-List-version-1/"/>
    <url>/2020/08/11/My-Bucket-List-version-1/</url>
    
    <content type="html"><![CDATA[<p>0.希望能为国家突破一些技术障碍</p><a id="more"></a><p>1.去俄罗斯游玩，再去伦敦的马克思墓地</p><p>2.帮助一个陌生人</p><p>3.对一个女生表白 and 亲吻世界上最美的女生</p><p>4.跑完一次马拉松</p><p>5.写出一个属于自己的纪念app/网页</p><p>6.去当国际志愿者 and 去联合国转转</p><p>7.见勒布朗 詹姆斯一面</p><p>8.开一次枪、坐直升机跳伞</p><p>9.把自己都捐了</p><p>…</p><p>正在努力的事情：</p><p>9.阅读马列主义书籍及其他世界名著</p><p>10.编程，进入ACM队</p><p>11.复习…</p><p>12.坚持跑步、锻炼</p><p>13.捐款</p><p>14.成为党员</p><p>15.保研到THU</p><p>16.能为国家硬件/软件做出自己的贡献</p>]]></content>
    
    
    <categories>
      
      <category>Bucket List</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
      <tag>Thinking</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
