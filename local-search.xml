<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++面向过程总结</title>
    <link href="/2020/08/12/C-%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <url>/2020/08/12/C-%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>注：本文是我回顾C++面向对象内容前的一些自认为有趣的内容orz </p><p>本博文参考书籍：《C++ primer plus》（第六版）</p><a id="more"></a><h1 id="再从-Hello-World-谈起"><a href="#再从-Hello-World-谈起" class="headerlink" title="再从 Hello World 谈起"></a>再从 Hello World 谈起</h1><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Hello World!&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>经过了一年的学习，这个简单的程序感觉不值一提</p><p><strong>但仔细看看，对于：include, iostream, using namespace std这些名词我真的十分了解吗？</strong></p><p> <em>虽然现在也不能说全部了解，我只是把自己掌握的东西分享出来…orz</em></p><h2 id="我们的程序真的只有这么几行吗？"><a href="#我们的程序真的只有这么几行吗？" class="headerlink" title="我们的程序真的只有这么几行吗？"></a>我们的程序真的只有这么几行吗？</h2><p>谈到这个问题就必须引出一个<strong>预处理器</strong>的概念</p><p>对计算机系统有初步了解后，我们可以知道源代码需要经过：预处理器 –&gt; 编译器 –&gt;汇编器 –&gt;链接器后才能生成可执行的二进制文件。</p><p>预处理器有很多种（都是以#开头），include是我们最早见到的一个。</p><p>其作用是：<strong>把我们的源文件和预处理的头文件进行整合，然后对合并后的文件进行编译</strong></p><p><strong>以iostream为例子，其进行整合的目的就是为了让程序能够和外界进行通信，io是input和output的缩写</strong></p><p><em>小知识：endl也是包含在iostream中的哦…</em></p><h2 id="using-namespace-std-是嘛意思？"><a href="#using-namespace-std-是嘛意思？" class="headerlink" title="using namespace std 是嘛意思？"></a>using namespace std 是嘛意思？</h2><p>如果对C语言有过了解，那么你会对这个东东感到很新奇，因为C里面并没有…</p><p><strong>这是C++为了方便合作开发(避免变量和函数名重复导致程序错误的情况)在C基础上提出的概念</strong></p><pre><code class="hljs c++"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span></code></pre><p>namespace 就是它翻译过来的意思 “命名空间”</p><p>这行代码叫做<strong>using编译指令</strong> //<strong>全局代码的类、函数、变量</strong>命名空间都是std(standard)即c++定义的标准命名空间</p><p>既然这是后来加上的，那么我们自然可以去掉它。</p><p>还是对Hello World来说</p><p>一种是非标准写法</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Hello World&quot;</span>&lt;&lt;<span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p><em>此写法很可能不被你的编译器支持（需要另安插件），运行成功也会出现warning，因为该库是C++旧风格，现在已经不再标准库里</em></p><p>另一种是比较繁琐的写法</p><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;Hello World&quot;</span>&lt;&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">//更好的策略是使用 using std::cin或者cout或endl——只使需要的名称可用</span></code></pre><p><em>小知识：带 .h的头文件都是C语言原有的；头文件前带 c的(cmath)是C原有头文件转换为C++文件的</em></p><h1 id="变量与数据"><a href="#变量与数据" class="headerlink" title="变量与数据"></a>变量与数据</h1><p>C++是一门面向对象的编程语言，即使我们现在在对面向过程的部分进行讨论，但它的设计还是为了面向对象服务——只有理解了C++中内置的类型才能自己创造类。</p><p><em>首先让我们复习一下变量的命名规则</em></p><blockquote><p>1.名称中只能使用字母、数字、下划线</p><p>2.名称的第一个字不能说数字</p><p>3.大小写敏感</p><p>4.不能将C++关键字作为变量名</p><p>5.以两个下划线或下划线和大写字母开头的名称将被保留给实现(编译器和其使用的资源)使用，以一个下划线开头的名字被保留给实现，用作全局标识符。</p><p>//你可以打开库函数看一下，里面的函数名大多由下划线开始<a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/c_global/cmath">C++STL源代码</a></p><p>6.C++对于变量名长短没有限制，但有些平台会有长度限制。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Language</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My Bucket List -- version 1</title>
    <link href="/2020/08/11/My-Bucket-List-version-1/"/>
    <url>/2020/08/11/My-Bucket-List-version-1/</url>
    
    <content type="html"><![CDATA[<p>0.希望能为国家突破一些技术障碍</p><a id="more"></a><p>1.去俄罗斯游玩，再去伦敦的马克思墓地</p><p>2.帮助一个陌生人</p><p>3.对一个女生表白 and 亲吻世界上最美的女生</p><p>4.跑完一次马拉松</p><p>5.写出一个属于自己的纪念app/网页</p><p>6.去当国际志愿者 and 去联合国转转</p><p>7.见勒布朗 詹姆斯一面</p><p>8.开一次枪、坐直升机跳伞</p><p>9.把自己都捐了</p><p>…</p><p>正在努力的事情：</p><p>9.阅读马列主义书籍及其他世界名著</p><p>10.编程，进入ACM队</p><p>11.复习…</p><p>12.坚持跑步、锻炼</p><p>13.捐款</p><p>14.成为党员</p><p>15.保研到THU</p><p>16.能为国家硬件/软件做出自己的贡献</p>]]></content>
    
    
    <categories>
      
      <category>Bucket List</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Life</tag>
      
      <tag>Thinking</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
